# -*- coding: utf-8 -*-
"""NN-Assignment5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbkdZEAvtJCr8OQh9LAl_RBfzFRd6AYq
"""

import pandas as pd
df=pd.read_csv('glass.csv')

df.head()

df.info()

df.describe()

df.columns.values

df['Type'].value_counts()

from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
# Splitting the data using train_test_split for creating train and test data
X = df.drop("Type", axis=1)
Y = df["Type"]

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=47)

#Initialize the Gaussian Naive Bayes classifier
gnb = GaussianNB()

#Training the model with the training set
gnb.fit(X_train, Y_train)

#Using the trained model on the testing data
Y_predi = gnb.predict(X_test)

#Evaluating the model using accuracy_score fun and predicted output
accur_knn = round(gnb.score(X_train, Y_train) * 50, 2)
print('Accuracy: ', accur_knn)

#Getting the classification report of the data set
print('\nClassification Report: \n', classification_report(Y_test, Y_predi))

from sklearn.svm import SVC

#Initializing the SVM classifier with linear kernel
svm = SVC()
#As the normal SVM is giving bad accuracy, added the kernel option to convert the data.

#Training the model with the training set
svm.fit(X_train, Y_train)

#Predicting the target variable for the test set
Y_pred = svm.predict(X_test)

#Evaluating the model accuracy using score
acc_svm = round(svm.score(X_train, Y_train) * 50, 2)
print('Accuracy: ', acc_svm,'\n')

#Getting the accuracy report from classification_report
print('Classification Report: \n', classification_report(Y_test, Y_pred,zero_division=1))